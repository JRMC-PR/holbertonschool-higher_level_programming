# The Self
Class methods have only one specific difference from ordinary functions -
they must have an extra first name that has to be added to the beginning
 of the parameter list, but you do not give a value for this parameter when
 you call the method, Python will provide it. This particular variable refers
  to the object itself, and by convention, it is given the name self.

```
Note for C++/Java/C# Programmers

The self in Python is equivalent to the this pointer in C++ and the this
reference in Java and C#.
```
Say you have a class called MyClass and an instance of this class called myobject.
When you call a method of this object as myobject.method(arg1, arg2), this is automatically
converted by Python into MyClass.method(myobject, arg1, arg2) - this is all the special self is about.

# Clases

    ```
        class Person:
                pass # An empty block

        p = Person() # Default constructor
        print(p)


    ```
    $ python oop_simplestclass.py
<__main__.Person instance at 0x10171f518>

We create a new class using the class statement and the name of the class. This is followed by an indented
 block of statements which form the body of the class. In this case, we have an empty block which is indicated
 using the pass statement.

Next, we create an object/instance of this class using the name of the class followed by a pair of parentheses.
For our verification, we confirm the type of the variable by simply printing it. It tells us that we have an instance
of the Person class in the __main__ module.

# Methods

We have already discussed that classes/objects can have methods just like functions except that we have an extra self
variable. We will now see an example (save as oop_method.py).

class Person:
    def say_hi(self):
        print('Hello, how are you?')

p = Person()
p.say_hi()
# The previous 2 lines can also be written as
# Person().say_hi()
Output:

$ python oop_method.py
Hello, how are you?

How It Works

Here we see the self in action. Notice that the say_hi method takes no parameters but still has the self in the function definition.

# The __init__ method

The __init__ method is run as soon as an object of a class is instantiated (i.e. created). The method is useful to do any initialization
 (i.e. passing initial values to your object) you want to do with your object. Notice the double underscores both at the beginning and at the end of the name.

Example (save as oop_init.py):

class Person:
    def __init__(self, name):
        self.name = name

    def say_hi(self):
        print('Hello, my name is', self.name)

p = Person('Swaroop')
p.say_hi()
# The previous 2 lines can also be written as
# Person('Swaroop').say_hi()

$ python oop_init.py
Hello, my name is Swaroop

# How it works

Here, we define the __init__ method as taking a parameter name (along with the usual self).
Here, we just create a new field also called name. Notice these are two different variables
even though they are both called 'name'. There is no problem because the dotted notation self.name
means that there is something called "name" that is part of the object called "self" and the other name
is a local variable. Since we explicitly indicate which name we are referring to, there is no confusion.

# Clases and objects

Class variables are shared - they can be accessed by all instances of that class. There is only one copy
of the class variable and when any one object makes a change to a class variable, that change will be seen
by all the other instances.

Object variables are owned by each individual object/instance of the class. In this case, each object has its
 own copy of the field i.e. they are not shared and are not related in any way to the field by the same name in
 a different instance. An example will make this easy to understand (save as oop_objvar.py):



class Robot:
    """Represents a robot, with a name."""

    # A class variable, counting the number of robots
    population = 0

    def __init__(self, name):
        """Initializes the data."""
        self.name = name
        print("(Initializing {})".format(self.name))

        # When this person is created, the robot
        # adds to the population
        Robot.population += 1

    def die(self):
        """I am dying."""
        print("{} is being destroyed!".format(self.name))

        Robot.population -= 1

        if Robot.population == 0:
            print("{} was the last one.".format(self.name))
        else:
            print("There are still {:d} robots working.".format(
                Robot.population))

    def say_hi(self):
        """Greeting by the robot.

        Yeah, they can do that."""
        print("Greetings, my masters call me {}.".format(self.name))

    @classmethod
    def how_many(cls):
        """Prints the current population."""
        print("We have {:d} robots.".format(cls.population))


droid1 = Robot("R2-D2")
droid1.say_hi()
Robot.how_many()

droid2 = Robot("C-3PO")
droid2.say_hi()
Robot.how_many()

print("\nRobots can do some work here.\n")

print("Robots have finished their work. So let's destroy them.")
droid1.die()
droid2.die()

Robot.how_many()
Output:

$ python oop_objvar.py
(Initializing R2-D2)
Greetings, my masters call me R2-D2.
We have 1 robots.
(Initializing C-3PO)
Greetings, my masters call me C-3PO.
We have 2 robots.

Robots can do some work here.

Robots have finished their work. So let's destroy them.
R2-D2 is being destroyed!
There are still 1 robots working.
C-3PO is being destroyed!
C-3PO was the last one.
We have 0 robots.

# How it works

This is a long example but helps demonstrate the nature of class and
object variables. Here, population belongs to the Robot class and hence
is a class variable. The name variable belongs to the object (it is assigned using self)
and hence is an object variable.

Thus, we refer to the population class variable as Robot.population and not as self.population.
We refer to the object variable name using self.name notation in the methods of that object. Remember
this simple difference between class and object variables. Also note that an object variable with the same
name as a class variable will hide the class variable!

Instead of Robot.population, we could have also used self.__class__.population
because every object refers to its class via the self.__class__ attribute.


The how_many is actually a method that belongs to the class and not to the object. This means we can define
it as either a classmethod or a staticmethod depending on whether we need to know which class we are part of.
Since we refer to a class variable, let's use classmethod.

We have marked the how_many method as a class method using a decorator.

Decorators can be imagined to be a shortcut to calling a wrapper function (i.e. a function that "wraps" around another
function so that it can do something before or after the inner function), so applying the @classmethod decorator is the same as calling:

how_many = classmethod(how_many)





# Decorators
Decorators are a shortcut to applying wrapper functions. This is helpful to "wrap" functionality with the same code over and over again. For example,
 I created a retry decorator for myself that I can just apply to any function and if any exception is thrown during a run, it is retried again, till a
 maximum of 5 times and with a delay between each retry. This is especially useful for situations where you are trying to make a network call to a remote computer:

from time import sleep
from functools import wraps
import logging
logging.basicConfig()
log = logging.getLogger("retry")


def retry(f):
    @wraps(f)
    def wrapper_function(*args, **kwargs):
        MAX_ATTEMPTS = 5
        for attempt in range(1, MAX_ATTEMPTS + 1):
            try:
                return f(*args, **kwargs)
            except Exception:
                log.exception("Attempt %s/%s failed : %s",
                              attempt,
                              MAX_ATTEMPTS,
                              (args, kwargs))
                sleep(10 * attempt)
        log.critical("All %s attempts failed : %s",
                     MAX_ATTEMPTS,
                     (args, kwargs))
    return wrapper_function


counter = 0


@retry
def save_to_database(arg):
    print("Write to a database or make a network call or etc.")
    print("This will be automatically retried if exception is thrown.")
    global counter
    counter += 1
    # This will throw an exception in the first call
    # And will work fine in the second call (i.e. a retry)
    if counter < 2:
        raise ValueError(arg)


if __name__ == '__main__':
    save_to_database("Some bad value")
Output:

$ python more_decorator.py
Write to a database or make a network call or etc.
This will be automatically retried if exception is thrown.
ERROR:retry:Attempt 1/5 failed : (('Some bad value',), {})
Traceback (most recent call last):
  File "more_decorator.py", line 14, in wrapper_function
    return f(*args, **kwargs)
  File "more_decorator.py", line 39, in save_to_database
    raise ValueError(arg)
ValueError: Some bad value
Write to a database or make a network call or etc.
This will be automatically retried if exception is thrown.