>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# General cases
>>> bg = __import__('7-base_geometry'.__doc__)
>>> print(len(bg) > 0)
True

>>> bg = __import__('7-base_geometry').BaseGeometry.area.__doc__
>>> print(len(bg) > 0)
True

>>> bg = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
>>> print(len(bg) > 0)
True

>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

#Filter Errors

>>> bg.integer_validator("name", "John")
    Traceback (most recent call last)
    TypeError: value must be an integer
>>> bg.integer_validator("age", 0)
    Traceback (most recent call last)
    ValueError: value must be greater than 0
>>> bg.integer_validator("distance", -4)
    Traceback (most recetn call last)
    ValueError: neative must be greater than 0
>>> bg.integer_validator()
    Traceback (most recent call last)
    TypeError: integer_validator() missing 2 required positional argument: 'name' and 'value'
>>> bg.integer_validator("distance",)
    Traceback (most recent call last)
    TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator(, -4)
    Traceback (most recent call last)
    TypeError: integer_validator() missing required positional argument: 'name'
>>> bg.integer_validator("test", none)
    Traceback (most recent call last)
    TypeError: none must be integer
>>> bg.integer_validator("inf", float('inf'))
    Traceback (most recetn call last)
    TypeError; inf must be integer
